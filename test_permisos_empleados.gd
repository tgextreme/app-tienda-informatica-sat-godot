extends Node

"""
Test para verificar que los usuarios no-admin no pueden acceder a empleados
"""

func _ready():
	print("üß™ [TEST_PERMISOS_EMPLEADOS] Iniciando test de permisos...")
	
	# Esperar a que DataService est√© listo
	if not DataService.db:
		print("‚è≥ [TEST_PERMISOS_EMPLEADOS] Esperando DataService...")
		await get_tree().create_timer(2.0).timeout
	
	# Test 1: Usuario t√©cnico no deber√≠a poder navegar a empleados
	await test_usuario_tecnico()
	
	# Test 2: Usuario admin s√≠ deber√≠a poder navegar a empleados
	await test_usuario_admin()
	
	print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Todos los tests completados")

func test_usuario_tecnico():
	print("\nüîí [TEST_PERMISOS_EMPLEADOS] Test 1: Usuario T√©cnico")
	print("   - Email: user@mail.com")
	print("   - Rol: TECNICO (rol_id = 2)")
	print("   - Deber√≠a: NO poder acceder a empleados")
	
	# Login como t√©cnico
	var login_ok = AppState.login("user@mail.com", "123456")
	if not login_ok:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] Error: No se pudo hacer login como t√©cnico")
		return
	
	print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Login t√©cnico exitoso")
	print("   - Usuario actual: ", AppState.usuario_actual)
	print("   - Es admin: ", AppState.es_admin)
	print("   - Es t√©cnico: ", AppState.es_tecnico)
	
	# Verificar que Router no permita navegaci√≥n a empleados
	var puede_navegar = Router.puede_navegar_a("empleados_lista")
	if puede_navegar:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] ERROR: T√©cnico PUEDE navegar a empleados (deber√≠a estar bloqueado)")
	else:
		print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Correcto: T√©cnico NO puede navegar a empleados")
	
	# Verificar que el bot√≥n de empleados no est√© visible en dashboard
	# (Esto se verificar√≠a en la interfaz, aqu√≠ solo podemos verificar el estado)
	if AppState.es_admin:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] ERROR: T√©cnico marcado como admin")
	else:
		print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Correcto: T√©cnico no marcado como admin")
	
	AppState.logout()

func test_usuario_admin():
	print("\nüîë [TEST_PERMISOS_EMPLEADOS] Test 2: Usuario Admin")
	print("   - Email: admin@tienda-sat.com")
	print("   - Rol: ADMIN (rol_id = 1)")
	print("   - Deber√≠a: S√ç poder acceder a empleados")
	
	# Login como admin
	var login_ok = AppState.login("admin@tienda-sat.com", "admin123")
	if not login_ok:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] Error: No se pudo hacer login como admin")
		return
	
	print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Login admin exitoso")
	print("   - Usuario actual: ", AppState.usuario_actual)
	print("   - Es admin: ", AppState.es_admin)
	print("   - Es t√©cnico: ", AppState.es_tecnico)
	
	# Verificar que Router S√ç permita navegaci√≥n a empleados
	var puede_navegar = Router.puede_navegar_a("empleados_lista")
	if puede_navegar:
		print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Correcto: Admin PUEDE navegar a empleados")
	else:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] ERROR: Admin NO puede navegar a empleados (deber√≠a poder)")
	
	# Verificar que est√© marcado como admin
	if AppState.es_admin:
		print("‚úÖ [TEST_PERMISOS_EMPLEADOS] Correcto: Admin marcado como admin")
	else:
		print("‚ùå [TEST_PERMISOS_EMPLEADOS] ERROR: Admin NO marcado como admin")
	
	AppState.logout()