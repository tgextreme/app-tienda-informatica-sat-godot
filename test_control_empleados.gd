extends Node

"""
Test para verificar el control de acceso mejorado a empleados
- Verifica que el bot√≥n se deshabilite (no se oculte)
- Verifica que aparezca mensaje de error
- Verifica tooltips informativos
"""

func _ready():
	print("üß™ [TEST_CONTROL_EMPLEADOS] Iniciando test de control de acceso...")
	
	# Esperar a que DataService est√© listo
	if not DataService.db:
		print("‚è≥ [TEST_CONTROL_EMPLEADOS] Esperando DataService...")
		await get_tree().create_timer(2.0).timeout
	
	# Test con usuario t√©cnico (no-admin)
	await test_usuario_no_admin()
	
	# Test con usuario admin
	await test_usuario_admin()
	
	print("‚úÖ [TEST_CONTROL_EMPLEADOS] Todos los tests completados")

func test_usuario_no_admin():
	print("\nüîí [TEST_CONTROL_EMPLEADOS] Test 1: Usuario No-Admin (T√©cnico)")
	print("   - Email: user@mail.com")
	print("   - Rol: TECNICO (rol_id = 2)")
	print("   - Expectativa: Bot√≥n deshabilitado, no navegaci√≥n")
	
	# Login como t√©cnico
	var login_ok = AppState.login("user@mail.com", "123456")
	if not login_ok:
		print("‚ùå [TEST_CONTROL_EMPLEADOS] Error: No se pudo hacer login como t√©cnico")
		return
	
	print("‚úÖ [TEST_CONTROL_EMPLEADOS] Login t√©cnico exitoso")
	print("   - Es admin: ", AppState.es_admin)
	
	# Verificar permisos en Router
	var puede_navegar = Router.puede_navegar_a("empleados_lista")
	if puede_navegar:
		print("‚ùå [TEST_CONTROL_EMPLEADOS] ERROR: T√©cnico puede navegar (Router)")
	else:
		print("‚úÖ [TEST_CONTROL_EMPLEADOS] Correcto: Router bloquea navegaci√≥n")
	
	# Simular intento de navegaci√≥n directa
	print("\nüéØ [TEST_CONTROL_EMPLEADOS] Simulando intento de navegaci√≥n directa...")
	try:
		# Esto deber√≠a ser bloqueado por Router.puede_navegar_a()
		Router.ir_a("empleados_lista")
		print("‚ùå [TEST_CONTROL_EMPLEADOS] ERROR: Navegaci√≥n directa no fue bloqueada")
	except:
		print("‚úÖ [TEST_CONTROL_EMPLEADOS] Correcto: Navegaci√≥n directa bloqueada")
	
	AppState.logout()

func test_usuario_admin():
	print("\nüîë [TEST_CONTROL_EMPLEADOS] Test 2: Usuario Admin")
	print("   - Email: admin@tienda-sat.com")
	print("   - Rol: ADMIN (rol_id = 1)")
	print("   - Expectativa: Bot√≥n habilitado, navegaci√≥n permitida")
	
	# Login como admin
	var login_ok = AppState.login("admin@tienda-sat.com", "admin123")
	if not login_ok:
		print("‚ùå [TEST_CONTROL_EMPLEADOS] Error: No se pudo hacer login como admin")
		return
	
	print("‚úÖ [TEST_CONTROL_EMPLEADOS] Login admin exitoso")
	print("   - Es admin: ", AppState.es_admin)
	
	# Verificar permisos en Router
	var puede_navegar = Router.puede_navegar_a("empleados_lista")
	if puede_navegar:
		print("‚úÖ [TEST_CONTROL_EMPLEADOS] Correcto: Admin puede navegar (Router)")
	else:
		print("‚ùå [TEST_CONTROL_EMPLEADOS] ERROR: Router bloquea navegaci√≥n del admin")
	
	AppState.logout()

func test_estados_boton():
	"""Test adicional: Verificar que el estado del bot√≥n cambia correctamente"""
	print("\nüîò [TEST_CONTROL_EMPLEADOS] Test 3: Estados del Bot√≥n")
	
	# Crear una instancia ficticia del dashboard para probar l√≥gica
	print("   - Simulando configuraci√≥n de bot√≥n para t√©cnico...")
	simulate_button_state(false)  # No-admin
	
	print("   - Simulando configuraci√≥n de bot√≥n para admin...")
	simulate_button_state(true)   # Admin

func simulate_button_state(es_admin: bool):
	"""Simula la l√≥gica de configuraci√≥n del bot√≥n empleados"""
	var disabled = not es_admin
	var tooltip = "Solo los administradores pueden gestionar empleados" if not es_admin else "Gestionar empleados y usuarios del sistema"
	
	print("     - Bot√≥n deshabilitado: ", disabled)
	print("     - Tooltip: ", tooltip)
	
	if es_admin:
		print("‚úÖ [TEST_CONTROL_EMPLEADOS] Admin: Bot√≥n habilitado con tooltip informativo")
	else:
		print("‚úÖ [TEST_CONTROL_EMPLEADOS] No-admin: Bot√≥n deshabilitado con mensaje explicativo")